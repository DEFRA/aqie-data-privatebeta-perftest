<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="AQIE_GetAirPollutionData_v1">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.${project.version}. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
          </elementProp>
          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
            <stringProp name="Header.value">1</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">aqie-dataselector-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">perf-test-aqie-historicaldata-backend-05244.s3.eu-west-2.amazonaws.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager">
        <collectionProp name="DNSCacheManager.servers"/>
        <collectionProp name="DNSCacheManager.hosts"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AQIE_PBS_Downloaddata_2025">
        <intProp name="ThreadGroup.num_threads">3</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <longProp name="ThreadGroup.duration">120</longProp>
        <longProp name="ThreadGroup.delay">0</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">Postcode_UI.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2025_T01_LaunchURL" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-532204480"> Get air pollution data</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2025_T02_StartNow" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/search-location" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">search-location</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="287595278">Find monitoring stations by location</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2025_T03_EnterPostcode&amp;Continue" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/multiplelocations?fullSearchQuery=BR20XU&amp;locationMiles=5" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">multiplelocations</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fullSearchQuery" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fullSearchQuery</stringProp>
                  <stringProp name="Argument.value">${Postcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locationMiles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">locationMiles</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="99327569">Monitoring stations within  5 miles of ${Postcode}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">StationURL</stringProp>
              <stringProp name="RegexExtractor.regex"> &lt;a\s+href=  ([^&quot;&apos;]+/[^&quot;&apos;]+) &gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">StationURL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">StationName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a\s+href=([^&quot;&apos;]+/[^&quot;&apos;]+) &gt;  ([^&quot;&apos;]+) &lt;/a&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">StationName</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2025_T04_ClickMonitoringStation" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/stationdetails/LondonHonorOakPark" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${StationURL}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1553028341">${StationName}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2025_T05_DownloadHourlyData_AllPollutants" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hourly" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/all/Hourly</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadHourlyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadHourlyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2025_T06_DownloadDailyData_AllPollutants" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Daily" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/all/Daily</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadDailyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadDailyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadDailyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141921Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">300f4b7cedb6be59b8c4b57c230e6eca1f6d0dab4a309b153cc05664ad163dbf</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2025_T07_DownloadHourlyData_PM2.5" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hourly" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/PM2.5/Hourly</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadHourlyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadHourlyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141944Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141944Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">22751</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2025_T08_DownloadDailyData_PM2.5" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Daily" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/PM2.5/Daily</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadDailyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadDailyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141959Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141959Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">15540</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AQIE_LBS_Downloaddata_2024">
        <intProp name="ThreadGroup.num_threads">4</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <longProp name="ThreadGroup.duration">120</longProp>
        <longProp name="ThreadGroup.delay">30</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
          <stringProp name="filename">Location.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T01_LaunchURL" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-532204480"> Get air pollution data</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T02_StartNow" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/search-location">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">search-location</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="287595278">Find monitoring stations by location</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T03_EnterLocation&amp;Continue" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/multiplelocations?fullSearchQuery=BR20XU&amp;locationMiles=5" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">multiplelocations</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fullSearchQuery" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fullSearchQuery</stringProp>
                  <stringProp name="Argument.value">${Location}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locationMiles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">locationMiles</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1301307428">Locations matching &apos;${Location}&apos;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CorrectLocationURL</stringProp>
              <stringProp name="RegexExtractor.regex"> &lt;a\s+href=  ([^&quot;&apos;]+/[^&quot;&apos;]+)   &gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">StationURL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CorrectLocationName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;span\s+class=&quot;[^&quot;]+&quot;&gt;([^&lt;]+)&lt;/span&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">StationName</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T04_SelectCorrectLocation" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/multiplelocations?fullSearchQuery=BR20XU&amp;locationMiles=5" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${CorrectLocationURL}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1516737600">Monitoring stations within  50 miles of ${CorrectLocationName}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">StationURL</stringProp>
              <stringProp name="RegexExtractor.regex"> &lt;a\s+href=  ([^&quot;&apos;]+/[^&quot;&apos;]+) &gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">StationURL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">StationName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a\s+href=([^&quot;&apos;]+/[^&quot;&apos;]+) &gt;  ([^&quot;&apos;]+) &lt;/a&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">StationName</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T05_ClickMonitoringStation" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/stationdetails/LondonHonorOakPark" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${StationURL}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1553028341">${StationName}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T06_Click2024Hyperlink" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">rendertable/2024</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1537280">2024</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T07_DownloadHourlyData_AllPollutants" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hourly" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/all/Hourly</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadHourlyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadHourlyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141944Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141944Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">22751</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T08_DownloadDailyData_AllPollutants" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Daily" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/all/Daily</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadDailyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadDailyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141959Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141959Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">15540</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T09_DownloadHourlyData_NitrogenDioxide" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hourly">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/Nitrogen%20dioxide/Hourly</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadHourlyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadHourlyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141944Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141944Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">22751</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_LBS_DownloadData2024_T10_DownloadDailyData_NitrogenDioxide" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Daily" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/Nitrogen%20dioxide/Daily</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadDailyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadDailyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141959Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141959Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">15540</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AQIE_PBS_Downloaddata_2023">
        <intProp name="ThreadGroup.num_threads">5</intProp>
        <intProp name="ThreadGroup.ramp_time">10</intProp>
        <longProp name="ThreadGroup.duration">120</longProp>
        <longProp name="ThreadGroup.delay">60</longProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
          <stringProp name="filename">Postcode_UI.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T01_LaunchURL" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-532204480"> Get air pollution data</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T02_StartNow" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/search-location" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">search-location</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="287595278">Find monitoring stations by location</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T03_EnterPostcode&amp;Continue" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/multiplelocations?fullSearchQuery=BR20XU&amp;locationMiles=5" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">multiplelocations</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fullSearchQuery" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fullSearchQuery</stringProp>
                  <stringProp name="Argument.value">${Postcode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="locationMiles" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">locationMiles</stringProp>
                  <stringProp name="Argument.value">25</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2010818331">Monitoring stations within  25 miles of ${Postcode}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">StationURL</stringProp>
              <stringProp name="RegexExtractor.regex"> &lt;a\s+href=  ([^&quot;&apos;]+/[^&quot;&apos;]+) &gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">StationURL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">StationName</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a\s+href=([^&quot;&apos;]+/[^&quot;&apos;]+) &gt;  ([^&quot;&apos;]+) &lt;/a&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">StationName</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T04_ClickMonitoringStation" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/stationdetails/LondonHonorOakPark" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${StationURL}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1553028341">${StationName}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T05_Click2023Hyperlink" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://aqie-dataselector-perf-frontend.dev.cdp-int.defra.cloud/" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">rendertable/2023</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1537279">2023</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T06_DownloadHourlyData_PM10" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hourly" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/PM10/Hourly</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadHourlyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadHourlyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T07_DownloadDailyData_PM10" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Daily" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/PM10/Daily</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadDailyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadDailyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadDailyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141921Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">300f4b7cedb6be59b8c4b57c230e6eca1f6d0dab4a309b153cc05664ad163dbf</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T08_DownloadHourlyData_Ozone" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hourly" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/Ozone/Hourly</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadHourlyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadHourlyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141944Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141944Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">22751</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T09_DownloadDailyData_Ozone" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Daily" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/Ozone/Daily</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadDailyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadDailyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141959Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141959Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">15540</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T10_DownloadHourlyData_SulphurDioxide" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hourly" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/Sulphur%20dioxide/Hourly</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadHourlyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadHourlyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141944Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141944Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">3729363c3ba95334c8b8c3759ca22ae5baaabfd4b65605244ba0e490ff36da30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">22751</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="AQIE_PBS_DownloadData2023_T11_DownloadDailyData_SulphurDioxide" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Daily" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">downloaddata/Sulphur%20dioxide/Daily</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">DownloadDailyDataFile</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">com/</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">?X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Expires</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Expires=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Security-Token</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Security-Token=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Algorithm</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Algorithm=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Credential</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Credential=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Date</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Date=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">&amp;</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname">X-Amz-Signature</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">X-Amz-Signature=</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Data" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${DownloadDailyDataFile}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Expires}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Security-Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Algorithm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Credential}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Date}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">${X-Amz-Signature}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1004747228">text/csv</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://dev-aqie-historicaldata-backend-c63f2.s3.eu-west-2.amazonaws.com/measurement_data_HP1_2025.csv?X-Amz-Expires=604800&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjENH%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy%2BIFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX%2BKqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ%2FY9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0%2F7sAdjrz0aYwbKh4y%2FBg45Imtj1ArMUlHg%2B%2FR0CcE%2FyloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i%2FUH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta%2FIofxYdmNouyOjtfbd9I0apon%2B5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb%2FyjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1%2Bi3pAJL7W0%2BoXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf%2BCl44NDUUxq599zFToKlutSJkaj0q%2FyDJBp2xJ3JgNEHAN93Y%2BVqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl%2BT9Df7NQeEIE1EZSzLyxyquYc1QzeY4%2FcG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX%2BdBA1W67U%2BI61l4x725buqGZi%2Fm0CDfD8Vp9kt5e3ni%2FpnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF%2Fi68cD%2F%2FgEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk%2BEPjGNfB6HGiztBKh0pKBGuk9zS&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAU22UFNPRXE4DQZ2A%2F20250417%2Feu-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20250417T141959Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port">0</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">measurement_data_HP1_2025.csv</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="X-Amz-Date" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Date</stringProp>
                  <stringProp name="Argument.value">20250417T141959Z</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Algorithm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Algorithm</stringProp>
                  <stringProp name="Argument.value">AWS4-HMAC-SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Signature" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Signature</stringProp>
                  <stringProp name="Argument.value">8c30e94dd8f56c2de87845af6e3bb613fb0eac10fec52d6dc1980434c4aec8ed</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-SignedHeaders" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-SignedHeaders</stringProp>
                  <stringProp name="Argument.value">host</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Security-Token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Security-Token</stringProp>
                  <stringProp name="Argument.value">IQoJb3JpZ2luX2VjENH//////////wEaCWV1LXdlc3QtMiJIMEYCIQDA6VrTLPsoxy+IFT0ShPzfwFrG2xa9Xh8kocKkoiWhTwIhAOXZ8C3GX+KqM6I6MYsXnFZNOEUojR4p8bnksWOR0Xl6KvkDCFoQARoMMzMyNDk5NjEwNTk1IgwQ/Y9ohMBUdFJPeWgq1gNidP8FHYjbDUCb11565RPWMflU0/7sAdjrz0aYwbKh4y/Bg45Imtj1ArMUlHg+/R0CcE/yloCB87wUhz7mj8OCbtFUjwXp2VyYTLZWWCjHjj2O3i/UH7x2iCvnBud3KK8yvZbSfhP44zLb64Pv5Po6EhLQbs3Se73FNgdG3DiamGXta/IofxYdmNouyOjtfbd9I0apon+5VtPjUl91H2QKoYzr1rRitlOArhsfOO0SzLywk9I6KebcszNRkSqHTPwxVdqdXR4j7GBtw8CDC9dOGTyw6lZNdUGhIChzQb/yjE3JfUibkWyO2lTslcNeCbBriDIkSbyZuUTvZfPvee1+i3pAJL7W0+oXWFmEJiWeX6ManOX8PbRj8oCClyjfwh2837EK03kf+Cl44NDUUxq599zFToKlutSJkaj0q/yDJBp2xJ3JgNEHAN93Y+VqiR2Zom3ZntlvmsbvD23VaPOOOYWCo07Hq24tX607p2m2T6tZTxDCawUKElAq6BbgEKg4NQXD3U2xdjgperbU7KrNuEnY04yEzKoutUTwt1o9jZGUvjezy8y8NDl+T9Df7NQeEIE1EZSzLyxyquYc1QzeY4/cG2yu0JsIJImd1c9kF91wKYwLnTD0goPABjqkAWyNX+dBA1W67U+I61l4x725buqGZi/m0CDfD8Vp9kt5e3ni/pnQQ39U3FCdzywHVH7etYKjsG5lItmOre2T9OmZKOpOyZoZ7Hb1gROMGup9ozyrFPwF/i68cD//gEBZ4EkNYag8RXZvCYVTkuqECgy4lAYHfnrDqWWHi8c3iyikca77JxkUJy0NNSAZ9Hsrk+EPjGNfB6HGiztBKh0pKBGuk9zS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Credential" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">X-Amz-Credential</stringProp>
                  <stringProp name="Argument.value">ASIAU22UFNPRXE4DQZ2A/20250417/eu-west-2/s3/aws4_request</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="X-Amz-Expires" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">X-Amz-Expires</stringProp>
                  <stringProp name="Argument.value">604800</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">15540</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>false</message>
            <threadName>false</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
